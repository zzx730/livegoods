server:
  port: 9004
spring:
  application:
    name: livegoods-details
  profiles:
    active: mongodb,bannerNginx,redis
  cloud:
    config:
      uri: http://localhost:9010
      label: master
      name: livegoods
      profile: dev
# 断路器 即当失败率达到指定阈值则开启断路器并进行服务降级
resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      #配置滑动窗口的大小。
      slidingWindowSize: 10
      #断路器计算失败率或慢调用率之前所需的最小调用数（每个滑动窗口周期）。
      minimumNumberOfCalls: 5
      #断路器在半开状态下允许通过的调用次数。
      permittedNumberOfCallsInHalfOpenState: 3

      #如果设置为true，则意味着断路器将自动从开启状态过渡到半开状态，并且不需要调用来触发转换。
      #创建一个线程来监视断路器的所有实例，以便在WaitDurationInOpenstate之后将它们转换为半开状态。
      #但是，如果设置为false，则只有在发出调用时才会转换到半开，
      #即使在waitDurationInOpenState之后也是如此。这里的优点是没有线程监视所有断路器的状态。
      automaticTransitionFromOpenToHalfOpenEnabled: true
      #断路器从开启过渡到半开应等待的时间。
      waitDurationInOpenState: 5s
      #以百分比配置失败率阈值。当失败率等于或大于阈值时，断路器状态并关闭变为开启，并进行服务降级。
      failureRateThreshold: 50
      #表示重试事件缓冲区大小
      eventConsumerBufferSize: 10
      #记录为失败并因此增加失败率的异常列表。除非通过ignoreExceptions显式忽略，否则与列表中某个匹配或继承的异常都将被视为失败
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
      ignoreExceptions:
        - com.livegoods.details.exception.BusinessException
    shared:
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 30
      waitDurationInOpenState: 1s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      ignoreExceptions:
        - com.livegoods.details.exception.BusinessException
  instances:
    backendA:
      baseConfig: default
    backendB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 10
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 5s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10
      recordFailurePredicate: com.livegoods.details.exception.RecordFailurePredicate
# 请求频率限制器
resilience4j.ratelimiter:
  configs:
    default:
      registerHealthIndicator: false
      #一个周期内最大允许访问次数 1次/秒
      limitForPeriod: 1
      # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
      limitRefreshPeriod: 1s
      # 线程等待权限的默认等待时间 即此时每秒1个，如果一秒内有一个通过，则后续的请求需要排队，超过timeoutDuration时间，则进行超时处理
      timeoutDuration: 0
      # 消费者事件的缓冲数
      eventConsumerBufferSize: 100
  instances:
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 1
      limitRefreshPeriod: 1s
      timeoutDuration: 3s